local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ClientPlot = require(ReplicatedStorage.Library.Client.PlotCmds.ClientPlot)
local LocalData = ClientPlot.GetLocal()
local SaveModule = require(ReplicatedStorage.Library.Client.Save)
local HPillarItems = ReplicatedStorage.__DIRECTORY.HPillarItems

local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Window = Rayfield:CreateWindow({
	Name = "Auto Door & Pets",
	Icon = 0,
	LoadingTitle = "Rayfield Interface Suite",
	LoadingSubtitle = "by Sirius",
	ShowText = "Rayfield",
	Theme = "Default",
	ToggleUIKeybind = "K",
})

local AutoDoors = false
local DoorsToOpen = {}
local EggsToHatch = {}
local AutoCollect = false

local AutoHatch1 = false
local AutoHatch2 = false
local AutoHatchAll = false

local Tab = Window:CreateTab("Auto Buy", 4483362458)
local HatchTab = Window:CreateTab("Auto Hatch", 4483362458)

local Dropdown = Tab:CreateDropdown({
   Name = "Doors to Open",
   Options = {1, 2,3,4,5},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "Dropdown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
   Callback = function(Options)

    DoorsToOpen = Options
   end,
})

Tab:CreateToggle({
	Name = "Auto Buy Doors 1 & 2",
	CurrentValue = false,
	Flag = "AutoBuyDoors",
	Callback = function(Value)
		AutoDoors = Value
		task.spawn(function()
			while AutoDoors do
                for _, door in ipairs(DoorsToOpen) do
                    pcall(function()
                        ReplicatedStorage.Network.Plots_Invoke:InvokeServer(LocalData.Id, "PurchaseEgg", door, 3)
                    end)
                    task.wait()
                end
				task.wait()
			end
		end)
	end,
})

Tab:CreateToggle({
	Name = "Auto Collect",
	CurrentValue = false,
	Flag = "AutoBuyDoors",
	Callback = function(Value)
		AutoCollect = Value
        task.spawn(function()
            while AutoCollect do
                for i = 1, 10 do
                    pcall(function()
                        ReplicatedStorage.Network.HalloweenWorld_Claim:InvokeServer(i)
                    end)
                    task.wait()
                end
                task.wait(5)
            end
        end)
	end,
})

Tab:CreateButton({
	Name = "Equip Top 10 Pets",
	Callback = function()
        
		for i = 1, 10 do
			pcall(function()
                ReplicatedStorage.Network.HalloweenWorld_Claim:InvokeServer(i)
				ReplicatedStorage.Network.HalloweenWorld_PickUp:InvokeServer(i)
			end)
		end
        task.wait()
		local data = SaveModule.Get()
		local Pets = {}
		local PetsInv = data.Inventory.HPillar or {}
		local AllPets = {}

		for _, item in ipairs(HPillarItems:GetChildren()) do
			local module = require(item)
			local Name = module.PetId
			local basegen = module.BaseMoneyPerSecond
			Pets[Name] = {
				Base = basegen,
				Gold = basegen * 2,
				Rainbow = basegen * 4
			}
		end

		local function getPerSecond(Name, Rarity)
			local pet = Pets[Name]
			return pet and pet[Rarity] or 0
		end

		for _, petData in pairs(PetsInv) do
			local Name = petData.id
			local Rarity = ({[0]="Base",[1]="Gold",[2]="Rainbow"})[petData.pt] or "Base"
			local amount = petData._am or 1
			local uuid = _

			for i = 1, amount do
				table.insert(AllPets, {
					Name = Name,
					Rarity = Rarity,
					PerSecond = getPerSecond(Name, Rarity),
					UUID = uuid
				})
			end
		end

		table.sort(AllPets, function(a, b)
			return a.PerSecond > b.PerSecond
		end)

		for i = 1, math.min(10, #AllPets) do
			local pet = AllPets[i]
			task.spawn(function()
				pcall(function()
                    print("Equipping pet:", pet.Name, "with UUID:", pet.UUID)
					ReplicatedStorage.Network.HalloweenWorld_PlacePet:InvokeServer(i, pet.UUID)
				end)
			end)
		end
	end,
})


local Dropdown = HatchTab:CreateDropdown({
   Name = "Eggs to Hatch",
   Options = {"Pumpkin Egg", "Grave Egg", "Bat Egg", "Ghost Egg", "Cauldron Egg", "Spider Egg", "Reaper Egg", "Coffin Egg"},
   CurrentOption = {},
   MultipleOptions = true,
   Flag = "Dropdown1",
   Callback = function(Options)
    EggsToHatch = Options
   end,
})

HatchTab:CreateToggle({
	Name = "Auto Hatch 1x Eggs",
	CurrentValue = false,
	Flag = "AutoBuyDoors",
	Callback = function(Value)
		AutoHatch1 = Value
        task.spawn(function()
            while AutoHatch1 do
                for _, egg in ipairs(EggsToHatch) do
                    ReplicatedStorage.Network.HalloweenWorld_PickUp:InvokeServer(10)
                    ReplicatedStorage.Network.HalloweenWorld_PlaceEgg:InvokeServer(10, egg)
                    task.wait()
                end
                task.wait()
            end
        end)
	end,
})

HatchTab:CreateToggle({
	Name = "Auto Hatch All Slots",
	CurrentValue = false,
	Flag = "AutoHatchAll",
	Callback = function(Value)
		AutoHatchAll = Value
		task.spawn(function()
			while AutoHatchAll do
				for slot = 1, 10 do
				    for _, egg in ipairs(EggsToHatch) do
				    	task.spawn(function()
				    		local success1, err1 = pcall(function()
				    			ReplicatedStorage.Network.HalloweenWorld_PickUp:InvokeServer(slot)
				    		end)
				    		task.wait() 
				    		local success2, err2 = pcall(function()
				    			ReplicatedStorage.Network.HalloweenWorld_PlaceEgg:InvokeServer(slot, egg)
				    		end)
				    	end)
				    	task.wait(0.02) 
				    end
                    task.wait(0.05) 
				end
				task.wait(0.15)
			end
		end)
	end,
})
